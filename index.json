[{"authors":["admin"],"categories":null,"content":"Priyanka Golia is a Joint Ph.D candidate with Indian Institute of Technology, Kanpur,India, and National University of Singapore. Her research advisers are Subhajit Roy and Kuldeep S. Meel.\nHer research interest lies in the area of Boolean Functional Synthesis, Constraint Sampling, and Knowledge Compilation. She is the lead designer of the state-of-the-art functional synthesis engine, Manthan. Manthan takes advantage of advances in machine learning, constraint sampling, and automated reasoning to synthesize Boolean functions efficiently.\nWe will be presenting a tutorial on Automated Synthesis: Towards the Holy Grail of AI in AAAI 22. More details here.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/priyanka-golia/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/priyanka-golia/","section":"authors","summary":"Priyanka Golia is a Joint Ph.D candidate with Indian Institute of Technology, Kanpur,India, and National University of Singapore. Her research advisers are Subhajit Roy and Kuldeep S. Meel.\nHer research interest lies in the area of Boolean Functional Synthesis, Constraint Sampling, and Knowledge Compilation.","tags":null,"title":"Priyanka Golia","type":"authors"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"42877893bac50b24ff68541a8e790714","permalink":"/workshop/workshop_paper/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/workshop/workshop_paper/","section":"workshop","summary":"","tags":null,"title":"Workshop Papers","type":"workshop"},{"authors":["Priyanka Golia","Friedrich Slivovsky","Subhajit Roy","Kuldeep S. Meel"],"categories":null,"content":"","date":1626134400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626134400,"objectID":"f8e7c5bfc1e5ae45e96efd34b1f70524","permalink":"/publication/iccad21/","publishdate":"2021-07-13T00:00:00Z","relpermalink":"/publication/iccad21/","section":"publication","summary":"Given a Boolean specification between a set of inputs and outputs, the problem of Boolean functional synthesis is to synthesise each output as a function of inputs such that the specification is met. Although the past few years have witnessed intense algorithmic development, accomplishing scalability remains the holy grail. The state-of-the-art approach combines machine learning and automated reasoningto synthesise Boolean functions efficiently. In this paper, we propose fouralgorithmic improvements for a data-driven framework for functional synthesis: using a dependency-driven multi-classifier to learn candidatefunction, extracting uniquely defined functions by interpolation, variables retention, and using lexicographic MaxSAT to repair candidates. We implement these improvements in the state-of-the-art framework, called Manthan. The proposed framework is called Manthan2. Manthan2 shows significantly improved runtime performance compared to Manthan. In an extensive experimental evaluation on 609 benchmarks, Manthan2 is able to synthesise a Boolean function vector for 509 instances compared to 356 instances solved by Manthan – an increment of 153 instances over the state-of-the-art. To put this into perspective, Manthan improved on the prior state-of-the-art by only 76 instances.","tags":null,"title":"Engineering an Efficient Boolean Functional Synthesis Engine","type":"publication"},{"authors":["Priyanka Golia","Mate Soos","Sourav Chakraborty","Kuldeep S. Meel"],"categories":null,"content":"","date":1625788800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625788800,"objectID":"384b5baaaddeca1e60ddb98205ab7d1d","permalink":"/publication/fmcad21/","publishdate":"2021-07-09T00:00:00Z","relpermalink":"/publication/fmcad21/","section":"publication","summary":"Given a formula the problem of uniform sampling seeks to sample solutions of uniformly at random. Uniform sampling is a fundamental problem with a wide variety of applications. The computational intractability of uniform sampling has led to the development of several samplers that heavily rely on heuristics and are not accompanied by theoretical analysis of their distribution. Recently, Chakraborty and Meel (2019) designed the first scalable sampling tester, Barbarik, based on a grey-box sampling technique for testing if the distribution, according to which the given sampler is sampling, is close to the uniform or far from uniform. While the theoretical analysis of Barbarik provides only unconditional soundness guarantees, the empirical evaluation of Barbarik did show its success in determining that some of the off-the-shelf samplers were far from a uniform sampler. The availability of Barbarik has the potential to spur development of samplers and testing techniques such that developers can design sampling methods that can be accepted by Barbarik even though these samplers may not be amenable to a detailed mathematical analysis. In this paper, we present the realization of this aforementioned promise. Based on the flexibility offered by CryptoMiniSat, we design a sampler CMSGen that promises the achievement of sweet spot of the quality of distributions and runtime performance. In particular, CMSGen achieves significant runtime performance improvement over the existing samplers. We conduct two case studies, and demonstrate that the usage of CMSGen leads to significant runtime improvements in the context of combinatorial testing and functional synthesis. A salient strength of our work is the simplicity of CMSGen, which stands in contrast to complicated algorithmic schemes developed in the past that fail to attain desired quality of distributions with practical runtime performance.","tags":null,"title":"Designing Samplers is Easy: The Boon of Testers","type":"publication"},{"authors":null,"categories":null,"content":"Given a specification φ(X, Y ) over inputs X and output Y , defined over a background theory T, the problem of program synthesis is to design a program f such that Y = f (X) satisfies the specification φ. Over the past decade, syntax-guided synthesis (SyGuS) has emerged as a dominant approach to program synthesis where in addition to the specification φ, the end-user also specifies a grammar L to aid the underlying synthesis engine. This paper investigates the feasibility of synthesis techniques without grammar, a sub-class defined as T-constrained synthesis. We show that T-constrained synthesis can be reduced DQF(T), i.e., to the problem of finding a witness of a dependency quantified formula modulo theory. When the underlying theory is bitvectors, the corresponding DQF problem can be further reduced to Dependency Quantified Boolean Formulas (DQBF). We rely on the progress in DQBF solving to design DQBF-based synthesizers that outpeform the domain-specific program synthesis techniques, thereby positioning DQBF as a core representation language for program synthesis. Our empirical analysis shows that T-constrained synthesis can achieve significantly better scalability than syntax-guided approaches. Furthermore, the general purpose DQBF solvers perform on par with domain-specific synthesis techniques. DeQuS takes a program synthesis instances and reduce it to a DQF(T) instance. Currenlty, DeQUS can only handle bitvector theory.\n","date":1625356800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625356800,"objectID":"1fac878a95058204f0d5b88f4a6a309a","permalink":"/project/dequs/","publishdate":"2021-07-04T00:00:00Z","relpermalink":"/project/dequs/","section":"project","summary":"Program Synthesis as Dependency Quantified Formula Modulo Theory","tags":["program synthesis"],"title":"DeQuS","type":"project"},{"authors":["Priyanka Golia","Subhajit Roy","Kuldeep S. Meel"],"categories":null,"content":" ","date":1625072776,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625072776,"objectID":"9de780092648ee2b3b5e06d9791430e5","permalink":"/workshop/logic-workshop/","publishdate":"2021-07-01T01:06:16+08:00","relpermalink":"/workshop/logic-workshop/","section":"workshop","summary":"Quantified Boolean Formulas (QBF) extend propo- sitional logic with quantification ∀, ∃ for propositional variables. In QBF an existentially quantified variable is allowed to depend on all universally quantified variables in its scope. Dependency Quantified Boolean Formulas (DQBF) restricts the dependen- cies of existentially quantified variables. In DQBF, existentially quantified variables have explicit dependencies on subset of universally quantified variables, called Henkin dependencies. Given a Boolean specification between the set of inputs and set of outputs, the problem of Henkin synthesis is to synthesise each output variable as a function of its Henkin dependencies such that the specification is met. Henkin synthesis has wide- ranging applications, including verification of partial circuits, the synthesis of safe controllers, analysis of games. In this work, we propose a machine learning-based approach to Henkin synthesis, called DepManthan. DepManthan is the first general-purpose technique that can synthesise Henkin functions for both True and False DQBF instances. On an extensive evaluation over 550 instances, we demonstrate that DepManthan can synthesise functions for 350 instances compared to 101 instances by the prior state-of-the-art.","tags":null,"title":"Henkin Synthesis: DQBF meets Machine Learning","type":"workshop"},{"authors":["Priyanka Golia","Subhajit Roy","Kuldeep S. Meel"],"categories":null,"content":" ","date":1625072776,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625072776,"objectID":"344cd526b8cbf7776ce9a8494af6ce53","permalink":"/workshop/essli-workshop/","publishdate":"2021-07-01T01:06:16+08:00","relpermalink":"/workshop/essli-workshop/","section":"workshop","summary":"Boolean functional synthesis is a fundamental problem in computer science with wide-ranging applications and has witnessed a surge of interest resulting in progressively improved techniques over the past decade. Despite intense algorithmic development, a large number of problems remain beyond the reach of the state of the art techniques. Motivated by the progress in machine learning, we propose Manthan, a novel data-driven approach to Boolean functional synthesis. Manthan views functional synthesis as a classification problem, relying on advances in constrained sampling for data generation, and advances in automated reasoning for a novel proof-guided refinement and provable verification. On an extensive and rigorous evaluation over 609 benchmarks, we demonstrate that Manthan significantly improves upon the current state of the art, solving 356 benchmarks in comparison to 280, which is the most solved by a state of the art technique; thereby, we demonstrate an increase of 76 benchmarks over the current state of the art. Furthermore, Manthan solves 60 benchmarks that none of the current state of the art techniques could solve. The significant performance improvements, along with our detailed analysis, highlights several interesting avenues of future work at the intersection of machine learning, constrained sampling, and automated reasoning","tags":null,"title":"Manthan: A Data-Driven Approach for Boolean Function Synthesis","type":"workshop"},{"authors":["Priyanka Golia","Subhajit Roy","Kuldeep S. Meel"],"categories":null,"content":" ","date":1625072776,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625072776,"objectID":"15c09eda87a5b6849395eeaaaa0dfda9","permalink":"/workshop/qbf-workshop/","publishdate":"2021-07-01T01:06:16+08:00","relpermalink":"/workshop/qbf-workshop/","section":"workshop","summary":"Given a specification φ(X, Y ) over inputs X and output Y , defined over a background theory T, the problem of program synthesis is to design a pro- gram f such that Y = f (X) satisfies the specification φ. Over the past decade, syntax-guided synthesis (SyGuS) has emerged as a dominant approach for pro- gram synthesis where in addition to the specification φ, the end-user also speci- fies a grammar L to aid the underlying synthesis engine. This paper investigates the feasibility of synthesis techniques without grammar, a sub-class defined as T-constrained synthesis. We show that T-constrained synthesis can be reduced to DQF(T), i.e., to the problem of finding a witness of a Dependency Quantified Formula Modulo The- ory. When the underlying theory is the theory of bitvectors, the corresponding DQF(BV) problem can be further reduced to Dependency Quantified Boolean Formulas (DQBF). We rely on the progress in DQBF solving to design DQBF- based synthesizers that outperform the domain-specific synthesis techniques, thereby positioning DQBF as a core representation language for program synthesis.","tags":null,"title":"Program Synthesis as Dependency Quantified Formula Modulo Theory","type":"workshop"},{"authors":["Priyanka Golia","Subhajit Roy","Kuldeep S. Meel"],"categories":null,"content":"","date":1619740800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619740800,"objectID":"dadf083f9f9b95a1abc529af28974a92","permalink":"/publication/ijcai21/","publishdate":"2021-04-30T00:00:00Z","relpermalink":"/publication/ijcai21/","section":"publication","summary":"Given a specification φ(X, Y ) over inputs X and output Y , defined over a background theory T, the problem of program synthesis is to design a program f such that Y = f (X) satisfies the specification φ. Over the past decade, syntax-guided synthesis (SyGuS) has emerged as a dominant approach to program synthesis where in addition to the specification φ, the end-user also specifies a grammar L to aid the underlying synthesis engine. This paper investigates the feasibility of synthesis techniques without grammar, a sub-class defined as T-constrained synthesis. We show that T-constrained synthesis can be reduced DQF(T), i.e., to the problem of finding a witness of a dependency quantified formula modulo theory. When the underlying theory is bitvectors, the corresponding DQF problem can be further reduced to Dependency Quantified Boolean Formulas (DQBF). We rely on the progress in DQBF solving to design DQBF-based synthesizers that outpeform the domain-specific program synthesis techniques, thereby positioning DQBF as a core representation language for program synthesis. Our empirical analysis shows that T-constrained synthesis can achieve significantly better scalability than syntax-guided approaches. Furthermore, the general purpose DQBF solvers perform on par with domain-specific synthesis techniques.","tags":null,"title":"Program Synthesis as Dependency Quantified Formula Modulo Theory","type":"publication"},{"authors":["Priyanka Golia","Subhajit Roy","Kuldeep S. Meel"],"categories":null,"content":" ","date":1587229576,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587229576,"objectID":"7f3cac88719c579c1e2974689b12e955","permalink":"/workshop/live-tacas-20-manthan/","publishdate":"2020-04-19T01:06:16+08:00","relpermalink":"/workshop/live-tacas-20-manthan/","section":"workshop","summary":"LiVe 2020: 4th Workshop on Learning in Verification, ETPAS","tags":null,"title":"A Data-Driven Approach for Skolem Function Synthesis","type":"workshop"},{"authors":null,"categories":null,"content":"Boolean functional synthesis is a fundamental problem in computer science with wide-ranging applications and has witnessed a surge of interest resulting in progressively improved techniques over the past decade. Despite intense algorithmic development, a large number of problems remain beyond the reach of the state of the art techniques. Motivated by the progress in machine learning, we propose Manthan, a novel data-driven approach to Boolean functional synthesis. Manthan views functional synthesis as a classification problem, relying on advances in constrained sampling for data generation, and advances in automated reasoning for a novel proof-guided refinement and provable verification.\nManthan significantly improves upon the current state of the art, solving 356 benchmarks in comparison to 280, which is the most solved by a state of the art technique; thereby, it demonstrate an increase of 76 benchmarks over the current state of the art. Furthermore, Manthan solves 60 benchmarks that none of the current state of the art techniques could solve.\n","date":1585958400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585958400,"objectID":"6bd489f24a85fe7996c13957eb7d5fde","permalink":"/project/manthan/","publishdate":"2020-04-04T00:00:00Z","relpermalink":"/project/manthan/","section":"project","summary":"Manthan: A Data-Driven Approach for Boolean Function Synthesis","tags":["functional synthesis"],"title":"Manthan","type":"project"},{"authors":["Priyanka Golia","Subhajit Roy","Kuldeep S. Meel"],"categories":null,"content":" ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"cabef6926f81073c164f626f13142f02","permalink":"/publication/cav20-manthan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/publication/cav20-manthan/","section":"publication","summary":"Manthan takes in a F(X,Y) formula as input and returns Skolem function \\Psi such that \\exists Y F(X, Y) = F( X,\\Psi(X)). Manthan solves 60 benchmarks that none of the current state of the art techniques could solve.","tags":null,"title":"Manthan: A Data-Driven Approach for Boolean Function Synthesis","type":"publication"}]